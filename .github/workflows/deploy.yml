name: Deploy EKS Cluster with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy-base:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./base

    steps:
    # 1. Checkout do cÃ³digo
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurar o AWS CLI
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SECRET_ACCESS_TOKEN }}
        aws-region: ${{ vars.AWS_REGION }}

    # 3. Configurar o Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # 4. Inicializar o Terraform
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.BACKEND_BUCKET_NAME }}" \
          -backend-config="key=microsservices/terraform.tfstate" \
          -backend-config="region=${{ vars.AWS_REGION }}"

    # 5. Validar o Terraform
    - name: Terraform Validate
      run: terraform validate

    # 6. Gerar o plano do Terraform
    - name: Terraform Plan
      run: | 
        terraform plan -out=tfplan \
          -var="regionDefault=${{ vars.AWS_REGION }}" \
          -var="accountIdVoclabs=${{ secrets.AWS_ACCOUNT_ID_VOCLABS }}" \
          -var="projectName=${{ vars.PROJECT_NAME }}" \
          -var="s3BucketVideosName=${{vars.VIDEOS_BUCKET_NAME}}" \
          -var="sqsVideoStatusQueueName=${{vars.VIDEOS_STATUS_SQS_NAME}}" \
          -var="sqsVideoProcessQueueName=${{vars.VIDEOS_PROCESS_SQS_NAME}}" \
          -var="rdsVideosDbName=${{vars.VIDEOS_DB_NAME}}" \
          -var="rdsDbVideosUserName=${{secrets.VIDEOS_DB_USERNAME}}" \
          -var="rdsDbVideosPassword=${{secrets.VIDEOS_DB_PASSWORD}}" \
          -var="ecrApiVideosName=${{vars.VIDEOS_API_ECR_NAME}}" \
          -var="ecrWorkerVideosStatusName=${{vars.VIDEOS_WORKER_STATUS_ECR_NAME}}" \
          -var="ecrWorkerVideosProcessName=${{vars.VIDEOS_WORKER_PROCESS_ECR_NAME}}" \
          -var="sqsVideoNotificationQueueName=${{vars.VIDEOS_NOTIFICATION_SQS_NAME}}" \

    # 7. Aplicar o plano do Terraform
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    # 7.1 Output the DB Instance from terraform
    - name: Terraform Output DB Instance
      id: terraform-output
      run: |
        unset TF_LOG  # or ensure debug logging is off
        DB_INSTANCE=$(terraform output -raw rds_videos_instance_address)
        echo "DB_VIDEOS_INSTANCE=$DB_INSTANCE" >> $GITHUB_OUTPUT


    # 8. Configurar o Kubectl
    - name: Install Kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    - name: Configure Kubectl
      run: |
        aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ vars.PROJECT_NAME }}

    # 9. Implantar servidor de metricas para o cluster
    - name: Deploy Metrics Server
      run: kubectl apply -f ../k8s/metrics-server.yaml

    # 10. Implantar o KEDA no cluster
    - name: Set up Helm
      uses: azure/setup-helm@v4 # Use v4
      with:
        version: v3.12.0 # Specify a Helm version or let it use latest stable

    - name: Install/Upgrade KEDA using Helm
      run: |
        # Enable verbose command execution logging
        set -x 

        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        # Use upgrade --install to handle both initial install and subsequent upgrades
        # Ensure KEDA CRDs are installed first by the Helm chart
        helm upgrade --install keda kedacore/keda --namespace keda --create-namespace --wait
        
        echo "KEDA pods appear ready. Pausing briefly..."
        sleep 60 # Add a short delay 
        
        # Wait for the operator pod
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=operator -n keda --timeout=180s
        
        echo "KEDA installation and readiness check complete."
        # Disable verbose logging if needed for subsequent commands in the same step
        set +x 
    
    # 11. Criar secret compartilhado com as credencias de acesso ao banco de videos
    - name: Create/Update DB Connection Secret
      env:
        DB_PASSWORD: ${{ secrets.VIDEOS_DB_PASSWORD }}
        DB_UID: ${{ secrets.VIDEOS_DB_USERNAME }}
        DB_NAME: ${{ vars.VIDEOS_DB_NAME }}
        DB_PORT: 1433
      run: |
        SECRET_NAME="videos-db-connection-secret"
        CONNECTION_STRING="Server=${{ steps.terraform-output.outputs.DB_VIDEOS_INSTANCE }},${{ env.DB_PORT }};Database=${{ env.DB_NAME }};User=${{ env.DB_UID }};Password=${{ env.DB_PASSWORD }};TrustServerCertificate=True"
    
        if kubectl get secret "$SECRET_NAME" > /dev/null 2>&1; then
          kubectl delete secret "$SECRET_NAME" 
        fi
    
        kubectl create secret generic "$SECRET_NAME"  \
          --from-literal=connection-string="$CONNECTION_STRING"
    
    # 12. Criar secret compartilhado com os dados de acesso as credenciais da AWS 
    - name: Create/Update AWS Secret
      env:
        ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
        SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TOKEN: ${{ secrets.AWS_SECRET_ACCESS_TOKEN }}
        REGION: ${{ vars.AWS_REGION }}
      run: |
        SECRET_NAME="aws-credential-secret"
    
        if kubectl get secret "$SECRET_NAME" > /dev/null 2>&1; then
          kubectl delete secret "$SECRET_NAME" 
        fi
    
        kubectl create secret generic "$SECRET_NAME"  \
          --from-literal=access-key="${{ env.ACCESS_KEY }}" \
          --from-literal=secret-key="${{ env.SECRET_KEY }}" \
          --from-literal=session-token="${{ env.TOKEN }}" \
          --from-literal=region="${{ env.REGION }}" 
    
    # 13. Criar configmap compartilhado com os dados de acesso as filas sqs
    - name: Create/Update ConfigMap SQS
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        ID_VOCLABS: ${{ secrets.AWS_ACCOUNT_ID_VOCLABS }}
        SQS_PROCESS_NAME: ${{ vars.VIDEOS_PROCESS_SQS_NAME }}
        SQS_STATUS_NAME: ${{ vars.VIDEOS_STATUS_SQS_NAME }}
        VIDEOS_NOTIFICATION_NAME: ${{ vars.VIDEOS_NOTIFICATION_SQS_NAME }}
      run: |
        CONFIGMAP_NAME="sqs-queues-configmap"
    
        if kubectl get configmap "$CONFIGMAP_NAME"  > /dev/null 2>&1; then
          kubectl delete configmap "$CONFIGMAP_NAME" 
        fi
    
        kubectl create configmap "$CONFIGMAP_NAME" \
          --from-literal=videos-process-queue="https://sqs.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ID_VOCLABS }}/${{ env.SQS_PROCESS_NAME }}" \
          --from-literal=videos-process-queue-dlq="https://sqs.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ID_VOCLABS }}/${{ env.SQS_PROCESS_NAME }}-dlq" \
          --from-literal=videos-status-queue="https://sqs.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ID_VOCLABS }}/${{ env.SQS_STATUS_NAME }}.fifo" \
          --from-literal=videos-status-queue-dlq="https://sqs.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ID_VOCLABS }}/${{ env.SQS_STATUS_NAME }}-dlq.fifo" \
          --from-literal=videos-notification-queue="https://sqs.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ID_VOCLABS }}/${{ env.VIDEOS_NOTIFICATION_NAME }}" \
          --from-literal=videos-notification-queue-dlq="https://sqs.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ID_VOCLABS }}/${{ env.VIDEOS_NOTIFICATION_NAME }}-dlq" 
    
